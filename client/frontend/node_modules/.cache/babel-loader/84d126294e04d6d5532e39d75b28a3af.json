{"ast":null,"code":"import axios from 'axios';\nconst baseUrl = 'http://localhost:5000/api/v1';\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await axios.put(baseUrl + '/users', {\n      email: email,\n      password: password\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      message: \"Wrong email or password\",\n      status: \"401\"\n    };\n  }\n};\nexport const registerUser = async (username, email, password) => {\n  try {\n    const response = await axios.post(baseUrl + '/users', {\n      username: username,\n      email: email,\n      password: password\n    });\n    return response.data;\n  } catch (error) {\n    return {\n      message: \"Something went wrong\",\n      status: \"500\"\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Dator/Documents/Movie_Swipe/client/frontend/src/api.ts"],"names":["axios","baseUrl","loginUser","email","password","response","put","data","error","message","status","registerUser","username","post"],"mappings":"AAAA,OAAOA,KAAP,MAAmC,OAAnC;AAEA,MAAMC,OAAe,GAAG,8BAAxB;AAEA,OAAO,MAAMC,SAAS,GAAG,OAAOC,KAAP,EAAqBC,QAArB,KAAmE;AACxF,MAAG;AAEC,UAAMC,QAAwC,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUL,OAAO,GAAC,QAAlB,EAA6B;AAACE,MAAAA,KAAK,EAACA,KAAP;AAAcC,MAAAA,QAAQ,EAAEA;AAAxB,KAA7B,CAAvD;AACA,WAAOC,QAAQ,CAACE,IAAhB;AAEH,GALD,CAKC,OAAMC,KAAN,EAAiB;AACd,WAAO;AAACC,MAAAA,OAAO,EAAE,yBAAV;AAAqCC,MAAAA,MAAM,EAAE;AAA7C,KAAP;AACH;AACJ,CATM;AAWP,OAAO,MAAMC,YAAY,GAAG,OAAOC,QAAP,EAAwBT,KAAxB,EAAsCC,QAAtC,KAAoF;AAC5G,MAAG;AAEC,UAAMC,QAAwC,GAAG,MAAML,KAAK,CAACa,IAAN,CAAWZ,OAAO,GAAC,QAAnB,EAA6B;AAACW,MAAAA,QAAQ,EAACA,QAAV;AAAoBT,MAAAA,KAAK,EAACA,KAA1B;AAAiCC,MAAAA,QAAQ,EAACA;AAA1C,KAA7B,CAAvD;AACA,WAAOC,QAAQ,CAACE,IAAhB;AAEH,GALD,CAKC,OAAMC,KAAN,EAAgB;AACb,WAAO;AAACC,MAAAA,OAAO,EAAC,sBAAT;AAAiCC,MAAAA,MAAM,EAAE;AAAzC,KAAP;AACH;AACJ,CATM","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst baseUrl: string = 'http://localhost:5000/api/v1'\r\n\r\nexport const loginUser = async (email:string, password:string): Promise<UserApiDataType> => {\r\n    try{\r\n\r\n        const response: AxiosResponse<UserApiDataType> = await axios.put(baseUrl+'/users',  {email:email, password: password})\r\n        return response.data\r\n\r\n    }catch(error: any){\r\n        return {message: \"Wrong email or password\", status: \"401\"}\r\n    }\r\n}\r\n\r\nexport const registerUser = async (username:string, email:string, password:string): Promise<UserApiDataType> => {\r\n    try{\r\n\r\n        const response: AxiosResponse<UserApiDataType> = await axios.post(baseUrl+'/users', {username:username, email:email, password:password})\r\n        return response.data\r\n\r\n    }catch(error:any){\r\n        return {message:\"Something went wrong\", status: \"500\"}\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}